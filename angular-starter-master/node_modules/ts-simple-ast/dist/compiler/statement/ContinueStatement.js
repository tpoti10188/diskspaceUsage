"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("../../errors");
var base_1 = require("./../base");
var Statement_1 = require("./Statement");
exports.ContinueStatementBase = base_1.ChildOrderableNode(Statement_1.Statement);
var ContinueStatement = /** @class */ (function (_super) {
    __extends(ContinueStatement, _super);
    function ContinueStatement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets this continue statement's label or undefined if it does not exist.
     */
    ContinueStatement.prototype.getLabel = function () {
        return this.compilerNode.label == null
            ? undefined
            : this.getNodeFromCompilerNode(this.compilerNode.label);
    };
    /**
     * Gets this continue statement's label or throw if it does not exist.
     */
    ContinueStatement.prototype.getLabelOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getLabel(), "Expected to find a label.");
    };
    return ContinueStatement;
}(exports.ContinueStatementBase));
exports.ContinueStatement = ContinueStatement;
