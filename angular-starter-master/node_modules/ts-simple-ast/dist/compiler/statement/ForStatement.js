"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("./../../errors");
var IterationStatement_1 = require("./IterationStatement");
exports.ForStatementBase = IterationStatement_1.IterationStatement;
var ForStatement = /** @class */ (function (_super) {
    __extends(ForStatement, _super);
    function ForStatement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets this for statement's initializer or undefined if none exists.
     */
    ForStatement.prototype.getInitializer = function () {
        return this.getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);
    };
    /**
     * Gets this for statement's initializer or throws if none exists.
     */
    ForStatement.prototype.getInitializerOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getInitializer(), "Expected to find an initializer.");
    };
    /**
     * Gets this for statement's condition or undefined if none exists.
     */
    ForStatement.prototype.getCondition = function () {
        return this.getNodeFromCompilerNodeIfExists(this.compilerNode.condition);
    };
    /**
     * Gets this for statement's condition or throws if none exists.
     */
    ForStatement.prototype.getConditionOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getCondition(), "Expected to find a condition.");
    };
    /**
     * Gets this for statement's incrementor.
     */
    ForStatement.prototype.getIncrementor = function () {
        return this.getNodeFromCompilerNodeIfExists(this.compilerNode.incrementor);
    };
    /**
     * Gets this for statement's incrementor or throws if none exists.
     */
    ForStatement.prototype.getIncrementorOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getIncrementor(), "Expected to find an incrementor.");
    };
    return ForStatement;
}(exports.ForStatementBase));
exports.ForStatement = ForStatement;
