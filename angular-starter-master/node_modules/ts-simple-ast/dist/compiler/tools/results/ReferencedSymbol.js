"use strict";
var __decorate = (this && this.__decorate)/* istanbul ignore next */ || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./../../../utils");
var ReferenceEntry_1 = require("./ReferenceEntry");
var ReferencedSymbolDefinitionInfo_1 = require("./ReferencedSymbolDefinitionInfo");
/**
 * Referenced symbol.
 */
var ReferencedSymbol = /** @class */ (function () {
    /**
     * @internal
     */
    function ReferencedSymbol(global, compilerObject) {
        this.global = global;
        this._compilerObject = compilerObject;
        // it's important to store the references so that the nodes referenced inside will point
        // to the right node in case the user does manipulation between getting this object and getting the references
        this.references = this.compilerObject.references.map(function (r) { return new ReferenceEntry_1.ReferenceEntry(global, r); });
    }
    Object.defineProperty(ReferencedSymbol.prototype, "compilerObject", {
        /**
         * Gets the compiler referenced symbol.
         */
        get: function () {
            return this._compilerObject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the definition.
     */
    ReferencedSymbol.prototype.getDefinition = function () {
        return new ReferencedSymbolDefinitionInfo_1.ReferencedSymbolDefinitionInfo(this.global, this.compilerObject.definition);
    };
    /**
     * Gets the references.
     */
    ReferencedSymbol.prototype.getReferences = function () {
        return this.references;
    };
    __decorate([
        utils_1.Memoize
    ], ReferencedSymbol.prototype, "getDefinition", null);
    return ReferencedSymbol;
}());
exports.ReferencedSymbol = ReferencedSymbol;
