"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var callBaseFill_1 = require("./../callBaseFill");
var errors = require("./../../errors");
var manipulation_1 = require("./../../manipulation");
var utils_1 = require("./../../utils");
function ReturnTypedNode(Base) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getReturnType = function () {
            var typeChecker = this.global.typeChecker;
            var signature = typeChecker.getSignatureFromNode(this); // should always return a signature
            return signature.getReturnType();
        };
        class_1.prototype.getReturnTypeNode = function () {
            return this.getNodeFromCompilerNodeIfExists(this.compilerNode.type);
        };
        class_1.prototype.getReturnTypeNodeOrThrow = function () {
            return errors.throwIfNullOrUndefined(this.getReturnTypeNode(), "Expected to find a return type node.");
        };
        class_1.prototype.setReturnType = function (text) {
            if (utils_1.StringUtils.isNullOrWhitespace(text))
                return this.removeReturnType();
            var returnTypeNode = this.getReturnTypeNode();
            if (returnTypeNode != null && returnTypeNode.getText() === text)
                return this;
            // insert new type
            manipulation_1.insertIntoParentTextRange({
                parent: this,
                insertPos: returnTypeNode != null ? returnTypeNode.getStart() : this.getFirstChildByKindOrThrow(ts.SyntaxKind.CloseParenToken).getEnd(),
                newText: returnTypeNode != null ? text : ": " + text,
                replacing: {
                    textLength: returnTypeNode == null ? 0 : returnTypeNode.getWidth()
                }
            });
            return this;
        };
        class_1.prototype.fill = function (structure) {
            callBaseFill_1.callBaseFill(Base.prototype, this, structure);
            if (structure.returnType != null)
                this.setReturnType(structure.returnType);
            return this;
        };
        class_1.prototype.removeReturnType = function () {
            var returnTypeNode = this.getReturnTypeNode();
            if (returnTypeNode == null)
                return this;
            var colonToken = returnTypeNode.getPreviousSiblingIfKindOrThrow(ts.SyntaxKind.ColonToken);
            manipulation_1.removeChildren({ children: [colonToken, returnTypeNode], removePrecedingSpaces: true });
            return this;
        };
        return class_1;
    }(Base));
}
exports.ReturnTypedNode = ReturnTypedNode;
