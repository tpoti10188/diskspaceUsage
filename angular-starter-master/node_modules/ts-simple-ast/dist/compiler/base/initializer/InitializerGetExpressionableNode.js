"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var errors = require("./../../../errors");
function InitializerGetExpressionableNode(Base) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.hasInitializer = function () {
            return this.compilerNode.initializer != null;
        };
        class_1.prototype.getInitializerIfKindOrThrow = function (kind) {
            return errors.throwIfNullOrUndefined(this.getInitializerIfKind(kind), "Expected to find an initiailizer of kind '" + ts.SyntaxKind[kind] + "'.");
        };
        class_1.prototype.getInitializerIfKind = function (kind) {
            var initiailizer = this.getInitializer();
            if (initiailizer != null && initiailizer.getKind() !== kind)
                return undefined;
            return initiailizer;
        };
        class_1.prototype.getInitializerOrThrow = function () {
            return errors.throwIfNullOrUndefined(this.getInitializer(), "Expected to find an initializer.");
        };
        class_1.prototype.getInitializer = function () {
            return this.getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);
        };
        return class_1;
    }(Base));
}
exports.InitializerGetExpressionableNode = InitializerGetExpressionableNode;
