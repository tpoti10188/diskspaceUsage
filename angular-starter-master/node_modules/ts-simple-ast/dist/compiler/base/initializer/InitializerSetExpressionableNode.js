"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var errors = require("./../../../errors");
var callBaseFill_1 = require("./../../callBaseFill");
var manipulation_1 = require("./../../../manipulation");
function InitializerSetExpressionableNode(Base) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.removeInitializer = function () {
            var initializer = this.getInitializer();
            if (initializer == null)
                return this;
            var previousSibling = initializer.getPreviousSiblingIfKindOrThrow(ts.SyntaxKind.FirstAssignment);
            manipulation_1.removeChildren({
                children: [previousSibling, initializer],
                removePrecedingSpaces: true
            });
            return this;
        };
        class_1.prototype.setInitializer = function (text) {
            errors.throwIfNotStringOrWhitespace(text, "text");
            if (this.hasInitializer())
                this.removeInitializer();
            var semiColonToken = this.getLastChildIfKind(ts.SyntaxKind.SemicolonToken);
            manipulation_1.insertIntoParent({
                insertPos: semiColonToken != null ? semiColonToken.getPos() : this.getEnd(),
                childIndex: semiColonToken != null ? semiColonToken.getChildIndex() : this.getChildCount(),
                insertItemsCount: 2,
                parent: this,
                newText: " = " + text
            });
            return this;
        };
        class_1.prototype.fill = function (structure) {
            callBaseFill_1.callBaseFill(Base.prototype, this, structure);
            if (structure.initializer != null)
                this.setInitializer(structure.initializer);
            return this;
        };
        return class_1;
    }(Base));
}
exports.InitializerSetExpressionableNode = InitializerSetExpressionableNode;
