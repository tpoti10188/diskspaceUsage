"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("./../../errors");
var common_1 = require("./../common");
var ExternalModuleReference = /** @class */ (function (_super) {
    __extends(ExternalModuleReference, _super);
    function ExternalModuleReference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets the expression or undefined of the yield expression.
     */
    ExternalModuleReference.prototype.getExpression = function () {
        return this.getNodeFromCompilerNodeIfExists(this.compilerNode.expression);
    };
    /**
     * Gets the expression of the yield expression or throws if it does not exist.
     */
    ExternalModuleReference.prototype.getExpressionOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getExpression(), "Expected to find an expression.");
    };
    return ExternalModuleReference;
}(common_1.Node));
exports.ExternalModuleReference = ExternalModuleReference;
