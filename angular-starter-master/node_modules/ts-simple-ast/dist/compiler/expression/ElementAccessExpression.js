"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("./../../errors");
var MemberExpression_1 = require("./MemberExpression");
var expressioned_1 = require("./expressioned");
exports.ElementAccessExpressionBase = expressioned_1.LeftHandSideExpressionedNode(MemberExpression_1.MemberExpression);
var ElementAccessExpression = /** @class */ (function (_super) {
    __extends(ElementAccessExpression, _super);
    function ElementAccessExpression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets this element access expression's argument expression or undefined if none exists.
     */
    ElementAccessExpression.prototype.getArgumentExpression = function () {
        return this.getNodeFromCompilerNodeIfExists(this.compilerNode.argumentExpression);
    };
    /**
     * Gets this element access expression's argument expression or throws if none exists.
     */
    ElementAccessExpression.prototype.getArgumentExpressionOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getArgumentExpression(), "Expected to find an argument expression.");
    };
    return ElementAccessExpression;
}(exports.ElementAccessExpressionBase));
exports.ElementAccessExpression = ElementAccessExpression;
