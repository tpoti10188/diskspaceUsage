"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Expression_1 = require("./Expression");
exports.BinaryExpressionBase = Expression_1.Expression;
var BinaryExpression = /** @class */ (function (_super) {
    __extends(BinaryExpression, _super);
    function BinaryExpression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets the left side of the binary expression.
     */
    BinaryExpression.prototype.getLeft = function () {
        return this.getNodeFromCompilerNode(this.compilerNode.left);
    };
    /**
     * Gets the operator token of the binary expression.
     */
    BinaryExpression.prototype.getOperatorToken = function () {
        return this.getNodeFromCompilerNode(this.compilerNode.operatorToken);
    };
    /**
     * Gets the right side of the binary expression.
     */
    BinaryExpression.prototype.getRight = function () {
        return this.getNodeFromCompilerNode(this.compilerNode.right);
    };
    return BinaryExpression;
}(exports.BinaryExpressionBase));
exports.BinaryExpression = BinaryExpression;
