"use strict";
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var NodeHandlerHelper_1 = require("./NodeHandlerHelper");
/**
 * Replacement handler that goes through the tree and forgets any nodes that have changed kind.
 */
var ForgetChangedNodeHandler = /** @class */ (function () {
    function ForgetChangedNodeHandler(compilerFactory) {
        this.compilerFactory = compilerFactory;
        this.helper = new NodeHandlerHelper_1.NodeHandlerHelper(compilerFactory);
    }
    ForgetChangedNodeHandler.prototype.handleNode = function (currentNode, newNode) {
        if (currentNode.getKind() !== newNode.getKind()) {
            currentNode.forget();
            return;
        }
        var newNodeChildren = newNode.getChildrenIterator();
        try {
            for (var _a = __values(currentNode.getCompilerChildren()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var currentNodeChild = _b.value;
                this.helper.handleForValues(this, currentNodeChild, newNodeChildren.next().value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.compilerFactory.replaceCompilerNode(currentNode, newNode.compilerNode);
        var e_1, _c;
    };
    return ForgetChangedNodeHandler;
}());
exports.ForgetChangedNodeHandler = ForgetChangedNodeHandler;
