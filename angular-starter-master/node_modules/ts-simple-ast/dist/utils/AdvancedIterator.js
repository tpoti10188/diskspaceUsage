"use strict";
var __generator = (this && this.__generator)/* istanbul ignore next */ || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("./../errors");
var AdvancedIterator = /** @class */ (function () {
    function AdvancedIterator(iterator) {
        this.iterator = iterator;
        this.buffer = [undefined, undefined, undefined]; // previous, current, next
        this.bufferIndex = 0;
        this.isDone = false;
        this.nextCount = 0;
        this.advance();
    }
    Object.defineProperty(AdvancedIterator.prototype, "done", {
        get: function () {
            return this.isDone;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvancedIterator.prototype, "current", {
        get: function () {
            if (this.nextCount === 0)
                throw new errors.InvalidOperationError("Cannot get the current when the iterator has not been advanced.");
            return this.buffer[this.bufferIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvancedIterator.prototype, "previous", {
        get: function () {
            if (this.nextCount <= 1)
                throw new errors.InvalidOperationError("Cannot get the previous when the iterator has not advanced enough.");
            return this.buffer[(this.bufferIndex + this.buffer.length - 1) % this.buffer.length];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvancedIterator.prototype, "peek", {
        get: function () {
            if (this.isDone)
                throw new errors.InvalidOperationError("Cannot peek at the end of the iterator.");
            return this.buffer[(this.bufferIndex + 1) % this.buffer.length];
        },
        enumerable: true,
        configurable: true
    });
    AdvancedIterator.prototype.next = function () {
        if (this.done)
            throw new errors.InvalidOperationError("Cannot get the next when at the end of the iterator.");
        var next = this.buffer[this.getNextBufferIndex()];
        this.advance();
        this.nextCount++;
        return next;
    };
    AdvancedIterator.prototype.rest = function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!this.done) return [3 /*break*/, 2];
                    return [4 /*yield*/, this.next()];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    };
    AdvancedIterator.prototype.advance = function () {
        var next = this.iterator.next();
        this.bufferIndex = this.getNextBufferIndex();
        if (next.done) {
            this.isDone = true;
            return;
        }
        this.buffer[this.getNextBufferIndex()] = next.value;
    };
    AdvancedIterator.prototype.getNextBufferIndex = function () {
        return (this.bufferIndex + 1) % this.buffer.length;
    };
    return AdvancedIterator;
}());
exports.AdvancedIterator = AdvancedIterator;
