"use strict";
var __generator = (this && this.__generator)/* istanbul ignore next */ || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values)/* istanbul ignore next */ || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ArrayUtils = /** @class */ (function () {
    /* istanbul ignore next */ function ArrayUtils() {
    }
    ArrayUtils.isNullOrEmpty = function (a) {
        return !(a instanceof Array) || a.length === 0;
    };
    ArrayUtils.getUniqueItems = function (a) {
        return a.filter(function (item, index) { return a.indexOf(item) === index; });
    };
    ArrayUtils.removeFirst = function (a, item) {
        var index = a.indexOf(item);
        if (index === -1)
            return false;
        a.splice(index, 1);
        return true;
    };
    ArrayUtils.flatten = function (items) {
        return items.reduce(function (a, b) { return a.concat(b); }, []);
    };
    ArrayUtils.find = function (items, condition) {
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                if (condition(item))
                    return item;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
        var e_1, _a;
    };
    ArrayUtils.from = function (items) {
        var a = [];
        try {
            for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {
                var item = items_2_1.value;
                a.push(item);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return a;
        var e_2, _a;
    };
    ArrayUtils.toIterator = function (items) {
        var items_3, items_3_1, item, e_3_1, e_3, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 7]);
                    items_3 = __values(items), items_3_1 = items_3.next();
                    _b.label = 1;
                case 1:
                    if (!!items_3_1.done) return [3 /*break*/, 4];
                    item = items_3_1.value;
                    return [4 /*yield*/, item];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    items_3_1 = items_3.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_3_1 = _b.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (items_3_1 && !items_3_1.done && (_a = items_3.return)) _a.call(items_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    ArrayUtils.sortByProperty = function (items, getProp) {
        items.sort(function (a, b) { return getProp(a) < getProp(b) ? -1 : 1; });
        return items;
    };
    ArrayUtils.binaryInsert = function (items, newItem, isGreaterThan) {
        var top = items.length - 1;
        var bottom = 0;
        while (bottom <= top) {
            var mid = Math.floor((top + bottom) / 2);
            if (isGreaterThan(items[mid]))
                top = mid - 1;
            else
                bottom = mid + 1;
        }
        items.splice(top + 1, 0, newItem);
    };
    ArrayUtils.binarySearch = function (items, isEqual, isGreaterThan) {
        var top = items.length - 1;
        var bottom = 0;
        while (bottom <= top) {
            var mid = Math.floor((top + bottom) / 2);
            if (isEqual(items[mid]))
                return mid;
            if (isGreaterThan(items[mid]))
                top = mid - 1;
            else
                bottom = mid + 1;
        }
        return -1;
    };
    return ArrayUtils;
}());
exports.ArrayUtils = ArrayUtils;
