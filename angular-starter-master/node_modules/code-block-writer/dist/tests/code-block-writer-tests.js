"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var code_block_writer_1 = require("./../code-block-writer");
describe("CodeBlockWriter", function () {
    describe("default opts", function () {
        it("should use a \n newline if none is specified", function () {
            var writer = new code_block_writer_1.default();
            writer.writeLine("test");
            assert.equal(writer.toString(), "test\n");
        });
    });
    describe("tests for \n", function () {
        runTestsForNewLineChar({ newLine: "\n" });
    });
    describe("tests for \r\n", function () {
        runTestsForNewLineChar({ newLine: "\r\n" });
    });
});
function runTestsForNewLineChar(opts) {
    function getWriter(additionalOpts) {
        if (additionalOpts === void 0) { additionalOpts = {}; }
        return new code_block_writer_1.default({
            newLine: opts.newLine,
            useSingleQuote: additionalOpts.useSingleQuote
        });
    }
    function doTest(expected, writerCallback, additionalOpts) {
        if (additionalOpts === void 0) { additionalOpts = {}; }
        var writer = getWriter(additionalOpts);
        writerCallback(writer);
        assert.equal(writer.toString(), expected.replace(/\r?\n/g, opts.newLine));
    }
    describe("#write()", function () {
        it("should write a single letter", function () {
            var expected = "a";
            doTest(expected, function (writer) {
                writer.write("a");
            });
        });
        it("should write the text", function () {
            var expected = "test";
            doTest(expected, function (writer) {
                writer.write("test");
            });
        });
        it("should do nothing if providing a null string", function () {
            var expected = "";
            doTest(expected, function (writer) {
                writer.write(null);
            });
        });
        it("should indent if it's passed a newline character inside a block", function () {
            var expected = "test {\n    inside\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.write("inside" + opts.newLine + "inside");
                });
            });
        });
        it("should write all requested newlines", function () {
            var expected = "\n\ntest\n\n";
            doTest(expected, function (writer) {
                writer.write("\n\ntest\n\n");
            });
        });
        it("should not write indentation between newlines", function () {
            var expected = "    test\n\n    test";
            doTest(expected, function (writer) {
                writer.setIndentationLevel(1);
                writer.write("test\n\ntest");
            });
        });
        it("should indent if passed an empty string at the start of a newline within a block", function () {
            var expected = "test {\n    inside\n    \n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside");
                    writer.write("");
                });
            });
        });
    });
    describe("#block()", function () {
        it("should allow an empty block", function () {
            var expected = "test {\n}";
            doTest(expected, function (writer) {
                writer.write("test").block();
            });
        });
        it("should write text inside a block", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.write("inside");
                });
            });
        });
        it("should write text inside a block inside a block", function () {
            var expected = "test {\n    inside {\n        inside again\n    }\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.write("inside").block(function () {
                        writer.write("inside again");
                    });
                });
            });
        });
        it("should not do an extra space if there was a space added before the block", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.write("inside");
                });
            });
        });
        it("should put the brace on the next space if there is a newline before it", function () {
            var expected = "test {\n    inside\n\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside").newLine().write("inside");
                });
            });
        });
        it("should not add an extra newline if the last character written in the block was a newline", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside");
                });
            });
        });
        it("should add a newline after the block when writing afterwards", function () {
            var expected = " {\n    t;\n}\n ";
            doTest(expected, function (writer) {
                writer.block(function () { return writer.write("t;"); }).write(" ");
            });
        });
        it("should not add a newline after the block when doing a condition call and the conditions are false", function () {
            var expected = " {\n    t;\n}";
            doTest(expected, function (writer) {
                writer.block(function () { return writer.write("t;"); }).conditionalWrite(false, " ").conditionalWriteLine(false, " ").conditionalNewLine(false);
            });
        });
        it("should not indent when in a string", function () {
            var expected = "block {\n    const t = `\nt`;\n    const u = 1;\n}";
            doTest(expected, function (writer) {
                writer.write("block").block(function () {
                    writer.write("const t = `\nt`;\nconst u = 1;");
                });
            });
        });
        it("should indent when in a comment", function () {
            var expected = "block {\n    const t = /*\n    const u = 1;*/\n}";
            doTest(expected, function (writer) {
                writer.write("block").block(function () {
                    writer.write("const t = /*\nconst u = 1;*/");
                });
            });
        });
    });
    describe("#inlineBlock()", function () {
        it("should allow an empty inline block", function () {
            var expected = "someCall({\n});";
            doTest(expected, function (writer) {
                writer.write("someCall(").inlineBlock().write(");");
            });
        });
        it("should do an inline block correctly", function () {
            var expected = "someCall({\n    console.log();\n});";
            doTest(expected, function (writer) {
                writer.write("someCall(").inlineBlock(function () {
                    writer.write("console.log();");
                }).write(");");
            });
        });
    });
    describe("#indentBlock()", function () {
        it("should indent text inside a block", function () {
            var expected = "test\n    inside";
            doTest(expected, function (writer) {
                writer.write("test").indentBlock(function () {
                    writer.write("inside");
                });
            });
        });
        it("should not do a newline on the first line", function () {
            var expected = "    inside";
            doTest(expected, function (writer) {
                writer.indentBlock(function () {
                    writer.write("inside");
                });
            });
        });
        it("should not do a newline at the start if the last was a new line", function () {
            var expected = "test\n    inside";
            doTest(expected, function (writer) {
                writer.writeLine("test").indentBlock(function () {
                    writer.write("inside");
                });
            });
        });
        it("should not do a newline at the end if the last was a new line", function () {
            var expected = "    inside\ntest";
            doTest(expected, function (writer) {
                writer.indentBlock(function () {
                    writer.writeLine("inside");
                }).write("test");
            });
        });
        it("should indent text inside a block inside a block", function () {
            var expected = "test\n    inside\n        inside again\ntest";
            doTest(expected, function (writer) {
                writer.write("test").indentBlock(function () {
                    writer.write("inside").indentBlock(function () {
                        writer.write("inside again");
                    });
                });
                writer.write("test");
            });
        });
        it("should not indent when in a string", function () {
            var expected = "block\n    const t = `\nt`;\n    const u = 1;";
            doTest(expected, function (writer) {
                writer.write("block").indentBlock(function () {
                    writer.write("const t = `\nt`;\nconst u = 1;");
                });
            });
        });
        it("should indent when in a comment", function () {
            var expected = "block\n    const t = /*\n    const u = 1;*/";
            doTest(expected, function (writer) {
                writer.write("block").indentBlock(function () {
                    writer.write("const t = /*\nconst u = 1;*/");
                });
            });
        });
    });
    describe("#writeLine()", function () {
        it("should write some text on a line", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.writeLine("test");
            });
        });
        it("should start writing on a newline if the last one was just writing", function () {
            var expected = "test\ntest\ntest\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").write("test").writeLine("test");
            });
        });
        it("should not create a newline between two writeLines", function () {
            var expected = "test\ntest\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").writeLine("test");
            });
        });
        it("should indent if passed an empty string at the start of a newline within a block", function () {
            var expected = "test {\n    inside\n    \n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside");
                    writer.writeLine("");
                });
            });
        });
    });
    describe("#blankLine()", function () {
        it("should do a blank line if the last text was not a new line", function () {
            var expected = "test\n\ntest";
            doTest(expected, function (writer) {
                writer.write("test").blankLine().write("test");
            });
        });
        it("should do a blank line if the last text was a newline", function () {
            var expected = "test\n\ntest";
            doTest(expected, function (writer) {
                writer.writeLine("test").blankLine().write("test");
            });
        });
        it("should do a blank line if the last was a blank line", function () {
            var expected = "test\n\n\ntest";
            doTest(expected, function (writer) {
                writer.writeLine("test").blankLine().blankLine().write("test");
            });
        });
    });
    describe("#indent()", function () {
        it("should indent as necessary", function () {
            var expected = "test\n    test";
            doTest(expected, function (writer) {
                writer.writeLine("test").indent().write("test");
            });
        });
    });
    describe("#newLineIfLastNotNewLine()", function () {
        it("should do a newline if the last text was not a newline", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.write("test").newLineIfLastNotNewLine();
            });
        });
        it("should not do a newline if the last text was a newline", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").newLineIfLastNotNewLine();
            });
        });
    });
    describe("#newLine()", function () {
        it("should do a newline when writing", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.write("test").newLine();
            });
        });
        it("should do a newline after doing a newline", function () {
            var expected = "test\n\ntext";
            doTest(expected, function (writer) {
                writer.write("test").newLine().newLine().write("text");
            });
        });
        it("should allow doing a newline at the start", function () {
            var expected = "\n";
            doTest(expected, function (writer) {
                writer.newLine();
            });
        });
        it("should allow doing a newline after doing a block", function () {
            var expected = "test {\n\n    test\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.newLine().writeLine("test");
                });
            });
        });
        it("should allow doing a newline if the last line was a blank line (allow consecutive blank lines)", function () {
            var expected = "test\n\n\ntext";
            doTest(expected, function (writer) {
                writer.write("test").newLine().newLine().newLine().write("text");
            });
        });
        it("should do a newline if a string causes it to not be a consecutive blank line", function () {
            var expected = "test\na\n";
            doTest(expected, function (writer) {
                writer.write("test").newLine().write("a").newLine();
            });
        });
        it("should be allowed to have two newlines at the end of a file", function () {
            var expected = "text\n\n";
            doTest(expected, function (writer) {
                writer.write("text").newLine().newLine();
            });
        });
        it("should indent if it's passed a newline character inside a block", function () {
            var expected = "test {\n    inside\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside" + opts.newLine + "inside");
                });
            });
        });
    });
    describe("#quote()", function () {
        it("should write out a double quote character", function () {
            var expected = "\"";
            doTest(expected, function (writer) {
                writer.quote();
            });
        });
        it("should write out a single quote character", function () {
            var expected = "'";
            doTest(expected, function (writer) {
                writer.quote();
            }, { useSingleQuote: true });
        });
        it("should write out text surrounded by quotes", function () {
            var expected = "\"test\"";
            doTest(expected, function (writer) {
                writer.quote("test");
            });
        });
    });
    describe("#spaceIfLastNotSpace()", function () {
        it("should do a space at the beginning of the file", function () {
            var expected = " ";
            doTest(expected, function (writer) {
                writer.spaceIfLastNotSpace();
            });
        });
        it("should do a space if the last character wasn't a space", function () {
            var expected = "test ";
            doTest(expected, function (writer) {
                writer.write("test").spaceIfLastNotSpace();
            });
        });
        it("should not do a space if the last character was a space", function () {
            var expected = "test ";
            doTest(expected, function (writer) {
                writer.write("test").spaceIfLastNotSpace().spaceIfLastNotSpace();
            });
        });
        it("should do a space if the last character was a newline", function () {
            var expected = "test\n ";
            doTest(expected, function (writer) {
                writer.write("test").newLine().spaceIfLastNotSpace();
            });
        });
    });
    describe("#getLength()", function () {
        it("should return the length", function () {
            var writer = getWriter();
            writer.write("1234");
            assert.equal(writer.getLength(), 4);
        });
    });
    describe("#conditionalNewLine()", function () {
        it("should write when the condition is true", function () {
            doTest("t\n", function (writer) {
                writer.write("t").conditionalNewLine(true);
            });
        });
        it("should not write when the condition is false", function () {
            doTest("t", function (writer) {
                writer.write("t").conditionalNewLine(false);
            });
        });
        it("should not write when the condition is undefined", function () {
            doTest("t", function (writer) {
                writer.write("t").conditionalNewLine(undefined);
            });
        });
    });
    describe("#conditionalWrite()", function () {
        it("should write when the condition is true", function () {
            doTest("test", function (writer) {
                writer.conditionalWrite(true, "test");
            });
        });
        it("should not write when the condition is false", function () {
            doTest("", function (writer) {
                writer.conditionalWrite(false, "test");
            });
        });
        it("should not write when the condition is undefined", function () {
            doTest("", function (writer) {
                writer.conditionalWrite(undefined, "test");
            });
        });
    });
    describe("#conditionalWriteLine()", function () {
        it("should write when the condition is true", function () {
            doTest("test\n", function (writer) {
                writer.conditionalWriteLine(true, "test");
            });
        });
        it("should not write when the condition is false", function () {
            doTest("", function (writer) {
                writer.conditionalWriteLine(false, "test");
            });
        });
        it("should not write when the condition is undefined", function () {
            doTest("", function (writer) {
                writer.conditionalWriteLine(undefined, "test");
            });
        });
    });
}
describe("#setIdentationLevel", function () {
    it("should throw when providing a negative number", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.setIndentationLevel(-1); });
    });
    it("should throw when not providing a number or string", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.setIndentationLevel({}); });
    });
    it("should not throw when providing an empty string", function () {
        var writer = new code_block_writer_1.default();
        assert.doesNotThrow(function () { return writer.setIndentationLevel(""); });
    });
    it("should throw when providing a string that doesn't contain only spaces and tabs", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.setIndentationLevel("  \ta"); });
    });
    it("should be able to set the indentation level and it maintains it over newlines", function () {
        var writer = new code_block_writer_1.default();
        writer.setIndentationLevel(2);
        writer.writeLine("t");
        writer.writeLine("t");
        assert.equal(writer.toString(), "        t\n        t\n");
        assert.equal(writer.getIndentationLevel(), 2);
    });
    it("should be able to set the indentation level to 0 within a block", function () {
        var writer = new code_block_writer_1.default();
        writer.write("t").block(function () {
            writer.setIndentationLevel(0);
            writer.writeLine("t");
            writer.writeLine("t");
        }).write("t").block(function () {
            writer.write("t");
        });
        assert.equal(writer.toString(), "t {\nt\nt\n}\nt {\n    t\n}");
    });
    function doSpacesTest(numberSpaces) {
        var writer = new code_block_writer_1.default({ indentNumberOfSpaces: numberSpaces });
        var indent = Array(numberSpaces + 1).join(" ");
        writer.setIndentationLevel(indent + indent);
        writer.write("t").block(function () { return writer.write("t"); });
        assert.equal(writer.toString(), indent + indent + "t {\n" + (indent + indent + indent) + "t\n" + (indent + indent) + "}");
        assert.equal(writer.getIndentationLevel(), 2);
    }
    it("should be able to set the indentation level using a string with two spaces", function () {
        doSpacesTest(2);
    });
    it("should be able to set the indentation level using a string with four spaces", function () {
        doSpacesTest(4);
    });
    it("should be able to set the indentation level using a string with eight spaces", function () {
        doSpacesTest(8);
    });
    it("should indent by the provided number of tabs", function () {
        var writer = new code_block_writer_1.default({ useTabs: true });
        writer.setIndentationLevel("\t\t");
        writer.write("s");
        assert.equal(writer.toString(), "\t\ts");
    });
    it("should indent to the nearest indent when mixing tabs and spaces (round down)", function () {
        var writer = new code_block_writer_1.default({ useTabs: true });
        writer.setIndentationLevel("\t \t ");
        writer.write("s");
        assert.equal(writer.toString(), "\t\ts");
    });
    it("should indent to the nearest indent when mixing tabs and spaces (round down, 2 spaces)", function () {
        var writer = new code_block_writer_1.default({ useTabs: true, indentNumberOfSpaces: 2 });
        writer.setIndentationLevel("\t \t");
        writer.write("s");
        assert.equal(writer.toString(), "\t\ts");
    });
    it("should indent to the nearest indent when mixing tabs and spaces (round up)", function () {
        var writer = new code_block_writer_1.default({ useTabs: true });
        writer.setIndentationLevel("\t \t  ");
        writer.write("s");
        assert.equal(writer.toString(), "\t\t\ts");
    });
    it("should indent to the nearest indent when mixing tabs and spaces (2 spaces)", function () {
        var writer = new code_block_writer_1.default({ useTabs: true, indentNumberOfSpaces: 2 });
        writer.setIndentationLevel("\t \t     ");
        writer.write("s");
        assert.equal(writer.toString(), "\t\t\t\t\ts");
    });
});
describe("#queueIdentationLevel", function () {
    it("should throw when providing a negative number", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.queueIndentationLevel(-1); });
    });
    it("should throw when not providing a number or string", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.queueIndentationLevel({}); });
    });
    it("should not throw when providing an empty string", function () {
        var writer = new code_block_writer_1.default();
        assert.doesNotThrow(function () { return writer.queueIndentationLevel(""); });
    });
    it("should throw when providing a string that doesn't contain only spaces and tabs", function () {
        var writer = new code_block_writer_1.default();
        assert.throws(function () { return writer.queueIndentationLevel("  \ta"); });
    });
    it("should be able to queue the indentation level", function () {
        var writer = new code_block_writer_1.default();
        writer.queueIndentationLevel(1);
        writer.writeLine("t");
        writer.writeLine("t");
        assert.equal(writer.toString(), "t\n    t\n");
    });
    it("should be able to queue the indentation mid line and it will write the next line with indentation", function () {
        var writer = new code_block_writer_1.default();
        writer.write("t");
        writer.queueIndentationLevel(1);
        writer.write("t");
        writer.writeLine("t");
        assert.equal(writer.toString(), "tt\n    t\n");
    });
    it("should be able to set and queue an indentation", function () {
        var writer = new code_block_writer_1.default();
        writer.setIndentationLevel(1);
        writer.queueIndentationLevel(2);
        writer.writeLine("t");
        writer.writeLine("t");
        assert.equal(writer.toString(), "    t\n        t\n");
    });
    it("should be able to set after queueng an indentation", function () {
        var writer = new code_block_writer_1.default();
        writer.queueIndentationLevel(1);
        writer.writeLine("t");
        writer.writeLine("t");
        writer.setIndentationLevel(2);
        writer.writeLine("t");
        writer.writeLine("t");
        assert.equal(writer.toString(), "t\n    t\n        t\n        t\n");
    });
});
describe("#isInString", function () {
    function doTest(str, expectedValues) {
        assert.equal(str.length + 1, expectedValues.length);
        var writer = new code_block_writer_1.default();
        assert.equal(writer.isInString(), expectedValues[0]);
        for (var i = 0; i < str.length; i++) {
            writer.write(str[i]);
            assert.equal(writer.isInString(), expectedValues[i + 1]);
        }
    }
    it("should be in a string while in double quotes", function () {
        doTest("s\"y\"", [false, false, true, true, false]);
    });
    it("should be in a string while in single quotes", function () {
        doTest("s'y'", [false, false, true, true, false]);
    });
    it("should be in a string while in backticks", function () {
        doTest("s`y`", [false, false, true, true, false]);
    });
    it("should not be affected by other string quotes while in double quotes", function () {
        doTest("\"'`${}\"", [false, true, true, true, true, true, true, false]);
    });
    it("should not be affected by other string quotes while in single quotes", function () {
        doTest("'\"`${}'", [false, true, true, true, true, true, true, false]);
    });
    it("should not be affected by other string quotes while in back ticks", function () {
        doTest("`'\"`", [false, true, true, true, false]);
    });
    it("should not be in a string while in backticks within braces", function () {
        doTest("`y${t}`", [false, true, true, true, false, false, true, false]);
    });
    it("should be in a string while in backticks within braces within a single quote string", function () {
        doTest("`${'t'}`", [false, true, true, false, true, true, false, true, false]);
    });
    it("should be in a string while in backticks within braces within a double quote string", function () {
        doTest("`${\"t\"}`", [false, true, true, false, true, true, false, true, false]);
    });
    it("should be in a string while in backticks within braces within back ticks", function () {
        doTest("`${`t`}`", [false, true, true, false, true, true, false, true, false]);
    });
    it("should not be in a string while in backticks within braces within back ticks within braces", function () {
        doTest("`${`${t}`}`", [false, true, true, false, true, true, false, false, true, false, true, false]);
    });
    it("should not be in a string while comments", function () {
        doTest("//'t'", [false, false, false, false, false, false]);
    });
    it("should be in a string while the previous line was a comment and now this is a string", function () {
        doTest("//t\n't'", [false, false, false, false, false, true, true, false]);
    });
    it("should not be in a string for star comments", function () {
        doTest("/*\n't'\n*/'t'", [false, false, false, false, false, false, false, false, false, false, true, true, false]);
    });
});
function runSequentialCheck(str, expectedValues, func, writer) {
    if (writer === void 0) { writer = new code_block_writer_1.default(); }
    assert.equal(str.length + 1, expectedValues.length);
    assert.equal(func(writer), expectedValues[0]);
    for (var i = 0; i < str.length; i++) {
        writer.write(str[i]);
        assert.equal(func(writer), expectedValues[i + 1], "For char: " + JSON.stringify(str[i]) + " (" + i + ")");
    }
}
describe("#isInComment", function () {
    function doTest(str, expectedValues) {
        runSequentialCheck(str, expectedValues, function (writer) { return writer.isInComment(); });
    }
    it("should be in a comment for star comments", function () {
        doTest("/*\nt\n*/", [false, false, true, true, true, true, true, false]);
    });
    it("should be in a comment for line comments", function () {
        doTest("// t\nt", [false, false, true, true, true, false, false]);
    });
});
describe("#isLastSpace", function () {
    function doTest(str, expectedValues) {
        runSequentialCheck(str, expectedValues, function (writer) { return writer.isLastSpace(); });
    }
    it("should be true when a space", function () {
        doTest("t t\t\n\r", [false, false, true, false, false, false, false]);
    });
});
describe("#isLastNewLine", function () {
    function doTest(str, expectedValues, customWriter) {
        runSequentialCheck(str, expectedValues, function (writer) { return writer.isLastNewLine(); }, customWriter);
    }
    it("should be true when a new line", function () {
        doTest(" \nt", [false, false, true, false]);
    });
    it("should be true for \n when specifying \r\n", function () {
        var writer = new code_block_writer_1.default({ newLine: "\r\n" });
        doTest(" \nt", [false, false, true, false], writer);
    });
});
describe("#getLastChar", function () {
    function doTest(str, expectedValues) {
        runSequentialCheck(str, expectedValues, function (writer) { return writer.getLastChar(); });
    }
    it("should get the last char", function () {
        doTest(" \nt", [undefined, " ", "\n", "t"]);
    });
});
describe("indentNumberOfSpaces", function () {
    var writer = new code_block_writer_1.default({ indentNumberOfSpaces: 2 });
    writer.write("do").block(function () {
        writer.write("something");
    });
    var expected = "do {\n  something\n}";
    it("should indent 2 spaces", function () {
        assert.equal(writer.toString(), expected);
    });
});
describe("useTabs", function () {
    var writer = new code_block_writer_1.default({ useTabs: true });
    writer.write("do").block(function () {
        writer.write("do").block(function () {
            writer.write("something");
        });
    });
    var expected = "do {\n\tdo {\n\t\tsomething\n\t}\n}";
    it("should use tabs", function () {
        assert.equal(writer.toString(), expected);
    });
});
